name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Frontend Tests & Build
  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install Dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run Linter
        run: |
          cd frontend
          npm run lint
      
      - name: Run Tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
      
      - name: Build Application
        run: |
          cd frontend
          npm run build
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build
          retention-days: 7

  # Backend Tests & Build
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install Dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run Linter
        run: |
          cd backend
          npm run lint
      
      - name: Run Tests
        env:
          NODE_ENV: test
          DATABASE_URL: mongodb://localhost:27017/ulp_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
        run: |
          cd backend
          npm test -- --coverage
      
      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          flags: backend
          name: backend-coverage

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: NPM Audit - Frontend
        run: |
          cd frontend
          npm audit --audit-level=moderate
      
      - name: NPM Audit - Backend
        run: |
          cd backend
          npm audit --audit-level=moderate

  # Docker Build & Push
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./docker/Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ulp-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/ulp-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ulp-frontend:latest
          cache-to: type=inline
      
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./docker/Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ulp-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/ulp-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/ulp-backend:latest
          cache-to: type=inline

  # Deploy to Production
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://ulp.yourdomain.com
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /var/www/universal-life-passport
            git pull origin main
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker system prune -f
      
      - name: Health Check
        run: |
          sleep 30
          curl -f https://ulp.yourdomain.com/api/health || exit 1
      
      - name: Notify Deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Deployment to production ${{ job.status }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.ulp.yourdomain.com
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Deploy to Staging Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            cd /var/www/ulp-staging
            git pull origin develop
            docker-compose -f docker-compose.staging.yml up -d --build
      
      - name: Run E2E Tests on Staging
        run: |
          npm install -g @playwright/test
          npx playwright test --config=playwright.config.staging.js
